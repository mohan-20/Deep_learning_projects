{"nbformat":4,"nbformat_minor":0,"metadata":{"colab":{"name":"Project_2_Student_code.ipynb","provenance":[],"collapsed_sections":[]},"kernelspec":{"name":"python2","display_name":"Python 2"}},"cells":[{"cell_type":"markdown","metadata":{"id":"xR4A9aGPpiuZ"},"source":["#Student Name: Pranav Mohan\n","#ECE 595 Machine Learning II\n","#Project 2: Autoencoders - Student Code"]},{"cell_type":"code","metadata":{"id":"viCY7Zn5psMN","colab":{"base_uri":"https://localhost:8080/"},"executionInfo":{"status":"ok","timestamp":1633601083911,"user_tz":240,"elapsed":27511,"user":{"displayName":"Pranav Mohan","photoUrl":"https://lh3.googleusercontent.com/a/default-user=s64","userId":"13794727767939433211"}},"outputId":"9362dd11-50d5-482b-e7df-032399edfb65"},"source":["# %reset\n","#Import necessary packages\n","import numpy as np\n","from keras.datasets import mnist\n","from keras.layers import Dense, Conv2D, MaxPooling2D, UpSampling2D, InputLayer, Flatten, Reshape\n","from keras.models import Sequential\n","import matplotlib.pyplot as plt\n","from keras import backend as K\n","import tensorflow as tf\n","import pandas as pd\n","from google.colab import drive\n","drive.mount('/content/drive')"],"execution_count":null,"outputs":[{"output_type":"stream","name":"stderr","text":["Using TensorFlow backend.\n"]},{"output_type":"stream","name":"stdout","text":["Mounted at /content/drive\n"]}]},{"cell_type":"markdown","metadata":{"id":"2vATVUR9pxNT"},"source":["#Part 0: Importing and Normalizing Data"]},{"cell_type":"code","metadata":{"id":"nN1cUmn1p0vn"},"source":["#Load MNIST data and normalize to [0,1]\n","(data_train, _), (data_test, _) = mnist.load_data()\n","data_train_reshape = data_train/255.\n","data_test_reshape = data_test/255.\n","data_train = data_train/255.\n","data_test = data_test/255."],"execution_count":null,"outputs":[]},{"cell_type":"markdown","metadata":{"id":"beNpVSplNsaJ"},"source":["#Part 1: Deep Fully-Connected AutoEncoder"]},{"cell_type":"markdown","metadata":{"id":"rfm3fYwcOyBk"},"source":["Answer the following questions: \n","\n","\n","1.  We want to predict output values of the intensity of the pixels which are between 0 to 1. Therefore choice of output layer activation function is important. (Open ended reasoning question). (a) Choose 'softmax’ or ‘sigmoid’. Reason why one is preferred over the other.\n"," \n","Ans: Both produce outputs between 0 and 1 which is great as our images are normalised in that scale. Softmax produces probabilities that add up to 1 and the probabilities themselves are interdependent. These can be great in a multiclassification problem. However, in an autoencoder, there are no such requirements. Just suppressing \n","\n","Sigmoid is usually used in binary classification as it pushes high probabilities for single class and probabilities are independent. However, we do not want this in the autoencoder especially when we have separate images and many labels. Thus is softmax will is preferred. "]},{"cell_type":"code","metadata":{"id":"vqYvEhZHN_h4","colab":{"base_uri":"https://localhost:8080/","height":304},"executionInfo":{"status":"ok","timestamp":1633604623394,"user_tz":240,"elapsed":868,"user":{"displayName":"Pranav Mohan","photoUrl":"https://lh3.googleusercontent.com/a/default-user=s64","userId":"13794727767939433211"}},"outputId":"6e3bab5d-238b-4fd9-f972-c58178c3f528"},"source":["#Reshape training and testing data into 784-dimensional vectors\n","#FILL IN THIS CODE BLOCK\n","print(tf.shape(data_train_reshape))\n","data_train=(tf.reshape(data_train_reshape,[60000,784,1])).numpy()\n","data_test=(tf.reshape(data_test_reshape,[10000,784,1])).numpy()\n","plt.imshow(tf.reshape(data_train[0],[28,28])); plt.colorbar();\n","data_train.shape"],"execution_count":null,"outputs":[{"output_type":"stream","name":"stdout","text":["tf.Tensor([60000    28    28], shape=(3,), dtype=int32)\n"]},{"output_type":"execute_result","data":{"text/plain":["(60000, 784, 1)"]},"metadata":{},"execution_count":10},{"output_type":"display_data","data":{"image/png":"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\n","text/plain":["<Figure size 432x288 with 2 Axes>"]},"metadata":{"needs_background":"light"}}]},{"cell_type":"code","metadata":{"id":"kwzbgd28XPf9"},"source":["num_epochs=150; batch_size=1024"],"execution_count":null,"outputs":[]},{"cell_type":"code","metadata":{"id":"8sEcG8-5T28W"},"source":["#Create autoencoder architecture\n","def deep_ae():\n","    model = Sequential()\n","    #Encoder\n","    model.add(Flatten())\n","    model.add(Dense(400,activation=\"relu\", use_bias=True, kernel_initializer=\"uniform\",))\n","    model.add(Dense(200,activation=\"relu\", use_bias=True, kernel_initializer=\"uniform\"))\n","    #Bottleneck layer\n","    model.add(Dense(100,activation=\"relu\", use_bias=True, kernel_initializer=\"uniform\"))\n","    #Decoder\n","    model.add(Dense(200,activation=\"relu\", use_bias=True, kernel_initializer=\"uniform\"))\n","    model.add(Dense(400,activation=\"relu\", use_bias=True, kernel_initializer=\"uniform\"))\n","    model.add(Dense(784, activation=\"sigmoid\"))\n","    model.add(Reshape((28,28)))\n","    return model"],"execution_count":null,"outputs":[]},{"cell_type":"code","metadata":{"id":"tEwdV09ms_KF","colab":{"base_uri":"https://localhost:8080/"},"executionInfo":{"status":"ok","timestamp":1633549362268,"user_tz":240,"elapsed":39643,"user":{"displayName":"Pranav Mohan","photoUrl":"https://lh3.googleusercontent.com/a/default-user=s64","userId":"13794727767939433211"}},"outputId":"0be6adbf-74b3-4d4c-8e36-6122c246f777"},"source":["#Create deep autoencoder graph\n","deep_ae_mse = deep_ae()\n","\n","#Compile model using an appropriate loss and optimizer algorithm\n","deep_ae_mse.compile(loss=\"mse\",optimizer=\"Adam\")\n","\n","#Train the model and assign training meta-data to a variable\n","deep_ae_mdata_mse = deep_ae_mse.fit(data_train, data_train, validation_data=(data_test,data_test), epochs=num_epochs, batch_size=batch_size, shuffle=True)\n","\n","deep_ae_bce = deep_ae()\n","deep_ae_bce.compile(loss=\"binary_crossentropy\",optimizer=\"Adam\")\n","deep_ae_mdata_bce = deep_ae_bce.fit(data_train, data_train, validation_data=(data_test,data_test), epochs=num_epochs, batch_size=batch_size, shuffle=True)\n","\n","#Calculate the reconstructions of the testing set (output of autoencoder on test set)\n","reconstructions_mse = deep_ae_mse.predict(data_test)\n","reconstructions_bce = deep_ae_bce.predict(data_test)\n","\n","df_bce_file = '/content/drive/MyDrive/ECE595DL/Project2/df_bce.csv'\n","with open(df_bce_file, mode='w') as f:\n","    df_bce.to_csv(f)\n","df_mse_file = '/content/drive/MyDrive/ECE595DL/Project2/df_mse.csv'\n","with open(df_mse_file, mode='w') as f:\n","    df_mse.to_csv(f)   \n"],"execution_count":null,"outputs":[{"output_type":"stream","name":"stdout","text":["Train on 60000 samples, validate on 10000 samples\n","Epoch 1/150\n","60000/60000 [==============================] - 6s 105us/step - loss: 0.1076 - val_loss: 0.0726\n","Epoch 2/150\n","60000/60000 [==============================] - 6s 102us/step - loss: 0.0676 - val_loss: 0.0618\n","Epoch 3/150\n","60000/60000 [==============================] - 6s 99us/step - loss: 0.0586 - val_loss: 0.0552\n","Epoch 4/150\n","60000/60000 [==============================] - 6s 100us/step - loss: 0.0515 - val_loss: 0.0468\n","Epoch 5/150\n","60000/60000 [==============================] - 6s 102us/step - loss: 0.0411 - val_loss: 0.0362\n","Epoch 6/150\n","60000/60000 [==============================] - 6s 102us/step - loss: 0.0342 - val_loss: 0.0323\n","Epoch 7/150\n","60000/60000 [==============================] - 6s 102us/step - loss: 0.0309 - val_loss: 0.0288\n","Epoch 8/150\n","60000/60000 [==============================] - 6s 102us/step - loss: 0.0281 - val_loss: 0.0267\n","Epoch 9/150\n","60000/60000 [==============================] - 6s 101us/step - loss: 0.0261 - val_loss: 0.0250\n","Epoch 10/150\n","60000/60000 [==============================] - 6s 101us/step - loss: 0.0248 - val_loss: 0.0236\n","Epoch 11/150\n","60000/60000 [==============================] - 6s 102us/step - loss: 0.0233 - val_loss: 0.0223\n","Epoch 12/150\n","60000/60000 [==============================] - 6s 101us/step - loss: 0.0222 - val_loss: 0.0212\n","Epoch 13/150\n","60000/60000 [==============================] - 6s 101us/step - loss: 0.0212 - val_loss: 0.0204\n","Epoch 14/150\n","60000/60000 [==============================] - 6s 101us/step - loss: 0.0203 - val_loss: 0.0196\n","Epoch 15/150\n","60000/60000 [==============================] - 6s 101us/step - loss: 0.0196 - val_loss: 0.0190\n","Epoch 16/150\n","60000/60000 [==============================] - 6s 102us/step - loss: 0.0189 - val_loss: 0.0183\n","Epoch 17/150\n","60000/60000 [==============================] - 6s 101us/step - loss: 0.0182 - val_loss: 0.0176\n","Epoch 18/150\n","60000/60000 [==============================] - 6s 101us/step - loss: 0.0176 - val_loss: 0.0172\n","Epoch 19/150\n","60000/60000 [==============================] - 6s 101us/step - loss: 0.0170 - val_loss: 0.0165\n","Epoch 20/150\n","60000/60000 [==============================] - 6s 101us/step - loss: 0.0165 - val_loss: 0.0160\n","Epoch 21/150\n","60000/60000 [==============================] - 6s 103us/step - loss: 0.0160 - val_loss: 0.0155\n","Epoch 22/150\n","60000/60000 [==============================] - 6s 100us/step - loss: 0.0155 - val_loss: 0.0151\n","Epoch 23/150\n","60000/60000 [==============================] - 6s 101us/step - loss: 0.0151 - val_loss: 0.0147\n","Epoch 24/150\n","60000/60000 [==============================] - 6s 100us/step - loss: 0.0147 - val_loss: 0.0143\n","Epoch 25/150\n","60000/60000 [==============================] - 6s 102us/step - loss: 0.0144 - val_loss: 0.0141\n","Epoch 26/150\n","60000/60000 [==============================] - 6s 102us/step - loss: 0.0140 - val_loss: 0.0136\n","Epoch 27/150\n","60000/60000 [==============================] - 6s 102us/step - loss: 0.0137 - val_loss: 0.0133\n","Epoch 28/150\n","60000/60000 [==============================] - 6s 101us/step - loss: 0.0132 - val_loss: 0.0130\n","Epoch 29/150\n","60000/60000 [==============================] - 6s 99us/step - loss: 0.0129 - val_loss: 0.0126\n","Epoch 30/150\n","60000/60000 [==============================] - 6s 99us/step - loss: 0.0126 - val_loss: 0.0123\n","Epoch 31/150\n","60000/60000 [==============================] - 6s 101us/step - loss: 0.0123 - val_loss: 0.0121\n","Epoch 32/150\n","60000/60000 [==============================] - 6s 99us/step - loss: 0.0120 - val_loss: 0.0117\n","Epoch 33/150\n","60000/60000 [==============================] - 6s 100us/step - loss: 0.0117 - val_loss: 0.0116\n","Epoch 34/150\n","60000/60000 [==============================] - 6s 101us/step - loss: 0.0116 - val_loss: 0.0113\n","Epoch 35/150\n","60000/60000 [==============================] - 6s 99us/step - loss: 0.0113 - val_loss: 0.0112\n","Epoch 36/150\n","60000/60000 [==============================] - 6s 101us/step - loss: 0.0111 - val_loss: 0.0109\n","Epoch 37/150\n","60000/60000 [==============================] - 6s 101us/step - loss: 0.0109 - val_loss: 0.0107\n","Epoch 38/150\n","60000/60000 [==============================] - 6s 99us/step - loss: 0.0107 - val_loss: 0.0106\n","Epoch 39/150\n","60000/60000 [==============================] - 6s 99us/step - loss: 0.0105 - val_loss: 0.0104\n","Epoch 40/150\n","60000/60000 [==============================] - 6s 103us/step - loss: 0.0104 - val_loss: 0.0102\n","Epoch 41/150\n","60000/60000 [==============================] - 6s 102us/step - loss: 0.0101 - val_loss: 0.0100\n","Epoch 42/150\n","60000/60000 [==============================] - 6s 102us/step - loss: 0.0099 - val_loss: 0.0098\n","Epoch 43/150\n","60000/60000 [==============================] - 6s 102us/step - loss: 0.0098 - val_loss: 0.0097\n","Epoch 44/150\n","60000/60000 [==============================] - 6s 104us/step - loss: 0.0097 - val_loss: 0.0096\n","Epoch 45/150\n","60000/60000 [==============================] - 6s 106us/step - loss: 0.0095 - val_loss: 0.0094\n","Epoch 46/150\n","60000/60000 [==============================] - 6s 105us/step - loss: 0.0094 - val_loss: 0.0093\n","Epoch 47/150\n","60000/60000 [==============================] - 6s 104us/step - loss: 0.0093 - val_loss: 0.0092\n","Epoch 48/150\n","60000/60000 [==============================] - 6s 107us/step - loss: 0.0091 - val_loss: 0.0091\n","Epoch 49/150\n","60000/60000 [==============================] - 6s 105us/step - loss: 0.0090 - val_loss: 0.0091\n","Epoch 50/150\n","60000/60000 [==============================] - 6s 103us/step - loss: 0.0089 - val_loss: 0.0089\n","Epoch 51/150\n","60000/60000 [==============================] - 6s 103us/step - loss: 0.0088 - val_loss: 0.0088\n","Epoch 52/150\n","60000/60000 [==============================] - 6s 102us/step - loss: 0.0087 - val_loss: 0.0087\n","Epoch 53/150\n","60000/60000 [==============================] - 6s 102us/step - loss: 0.0086 - val_loss: 0.0086\n","Epoch 54/150\n","60000/60000 [==============================] - 6s 101us/step - loss: 0.0085 - val_loss: 0.0085\n","Epoch 55/150\n","60000/60000 [==============================] - 6s 103us/step - loss: 0.0084 - val_loss: 0.0085\n","Epoch 56/150\n","60000/60000 [==============================] - 6s 104us/step - loss: 0.0083 - val_loss: 0.0083\n","Epoch 57/150\n","60000/60000 [==============================] - 6s 104us/step - loss: 0.0082 - val_loss: 0.0083\n","Epoch 58/150\n","60000/60000 [==============================] - 6s 103us/step - loss: 0.0082 - val_loss: 0.0085\n","Epoch 59/150\n","60000/60000 [==============================] - 6s 103us/step - loss: 0.0081 - val_loss: 0.0081\n","Epoch 60/150\n","60000/60000 [==============================] - 6s 102us/step - loss: 0.0080 - val_loss: 0.0081\n","Epoch 61/150\n","60000/60000 [==============================] - 6s 102us/step - loss: 0.0079 - val_loss: 0.0080\n","Epoch 62/150\n","60000/60000 [==============================] - 6s 103us/step - loss: 0.0079 - val_loss: 0.0079\n","Epoch 63/150\n","60000/60000 [==============================] - 6s 103us/step - loss: 0.0078 - val_loss: 0.0079\n","Epoch 64/150\n","60000/60000 [==============================] - 6s 105us/step - loss: 0.0078 - val_loss: 0.0079\n","Epoch 65/150\n","60000/60000 [==============================] - 6s 104us/step - loss: 0.0076 - val_loss: 0.0078\n","Epoch 66/150\n","60000/60000 [==============================] - 6s 106us/step - loss: 0.0076 - val_loss: 0.0076\n","Epoch 67/150\n","60000/60000 [==============================] - 6s 106us/step - loss: 0.0075 - val_loss: 0.0076\n","Epoch 68/150\n","60000/60000 [==============================] - 6s 106us/step - loss: 0.0075 - val_loss: 0.0075\n","Epoch 69/150\n","60000/60000 [==============================] - 6s 104us/step - loss: 0.0074 - val_loss: 0.0074\n","Epoch 70/150\n","60000/60000 [==============================] - 6s 106us/step - loss: 0.0073 - val_loss: 0.0075\n","Epoch 71/150\n","60000/60000 [==============================] - 6s 105us/step - loss: 0.0073 - val_loss: 0.0074\n","Epoch 72/150\n","60000/60000 [==============================] - 6s 105us/step - loss: 0.0072 - val_loss: 0.0074\n","Epoch 73/150\n","60000/60000 [==============================] - 6s 106us/step - loss: 0.0071 - val_loss: 0.0072\n","Epoch 74/150\n","60000/60000 [==============================] - 6s 105us/step - loss: 0.0071 - val_loss: 0.0072\n","Epoch 75/150\n","60000/60000 [==============================] - 6s 105us/step - loss: 0.0071 - val_loss: 0.0074\n","Epoch 76/150\n","60000/60000 [==============================] - 6s 104us/step - loss: 0.0070 - val_loss: 0.0071\n","Epoch 77/150\n","60000/60000 [==============================] - 6s 103us/step - loss: 0.0069 - val_loss: 0.0071\n","Epoch 78/150\n","60000/60000 [==============================] - 6s 103us/step - loss: 0.0069 - val_loss: 0.0070\n","Epoch 79/150\n","60000/60000 [==============================] - 6s 103us/step - loss: 0.0068 - val_loss: 0.0069\n","Epoch 80/150\n","60000/60000 [==============================] - 6s 102us/step - loss: 0.0068 - val_loss: 0.0070\n","Epoch 81/150\n","60000/60000 [==============================] - 6s 102us/step - loss: 0.0067 - val_loss: 0.0069\n","Epoch 82/150\n","60000/60000 [==============================] - 6s 101us/step - loss: 0.0067 - val_loss: 0.0068\n","Epoch 83/150\n","60000/60000 [==============================] - 6s 102us/step - loss: 0.0066 - val_loss: 0.0069\n","Epoch 84/150\n","60000/60000 [==============================] - 6s 102us/step - loss: 0.0066 - val_loss: 0.0068\n","Epoch 85/150\n","60000/60000 [==============================] - 6s 103us/step - loss: 0.0066 - val_loss: 0.0068\n","Epoch 86/150\n","60000/60000 [==============================] - 6s 104us/step - loss: 0.0065 - val_loss: 0.0066\n","Epoch 87/150\n","60000/60000 [==============================] - 6s 102us/step - loss: 0.0065 - val_loss: 0.0067\n","Epoch 88/150\n","60000/60000 [==============================] - 6s 101us/step - loss: 0.0065 - val_loss: 0.0066\n","Epoch 89/150\n","60000/60000 [==============================] - 6s 104us/step - loss: 0.0064 - val_loss: 0.0066\n","Epoch 90/150\n","60000/60000 [==============================] - 6s 102us/step - loss: 0.0064 - val_loss: 0.0066\n","Epoch 91/150\n","60000/60000 [==============================] - 6s 102us/step - loss: 0.0063 - val_loss: 0.0065\n","Epoch 92/150\n","60000/60000 [==============================] - 6s 105us/step - loss: 0.0063 - val_loss: 0.0065\n","Epoch 93/150\n","60000/60000 [==============================] - 6s 105us/step - loss: 0.0062 - val_loss: 0.0064\n","Epoch 94/150\n","60000/60000 [==============================] - 6s 104us/step - loss: 0.0062 - val_loss: 0.0063\n","Epoch 95/150\n","60000/60000 [==============================] - 6s 105us/step - loss: 0.0062 - val_loss: 0.0064\n","Epoch 96/150\n","60000/60000 [==============================] - 6s 105us/step - loss: 0.0061 - val_loss: 0.0063\n","Epoch 97/150\n","60000/60000 [==============================] - 6s 105us/step - loss: 0.0061 - val_loss: 0.0063\n","Epoch 98/150\n","60000/60000 [==============================] - 6s 105us/step - loss: 0.0060 - val_loss: 0.0061\n","Epoch 99/150\n","60000/60000 [==============================] - 6s 102us/step - loss: 0.0060 - val_loss: 0.0062\n","Epoch 100/150\n","60000/60000 [==============================] - 6s 104us/step - loss: 0.0060 - val_loss: 0.0061\n","Epoch 101/150\n","60000/60000 [==============================] - 6s 105us/step - loss: 0.0059 - val_loss: 0.0061\n","Epoch 102/150\n","60000/60000 [==============================] - 6s 104us/step - loss: 0.0059 - val_loss: 0.0061\n","Epoch 103/150\n","60000/60000 [==============================] - 6s 104us/step - loss: 0.0059 - val_loss: 0.0060\n","Epoch 104/150\n","60000/60000 [==============================] - 6s 105us/step - loss: 0.0058 - val_loss: 0.0061\n","Epoch 105/150\n","60000/60000 [==============================] - 6s 105us/step - loss: 0.0058 - val_loss: 0.0059\n","Epoch 106/150\n","60000/60000 [==============================] - 6s 104us/step - loss: 0.0058 - val_loss: 0.0059\n","Epoch 107/150\n","60000/60000 [==============================] - 6s 104us/step - loss: 0.0057 - val_loss: 0.0059\n","Epoch 108/150\n","60000/60000 [==============================] - 6s 103us/step - loss: 0.0057 - val_loss: 0.0059\n","Epoch 109/150\n","60000/60000 [==============================] - 6s 105us/step - loss: 0.0057 - val_loss: 0.0059\n","Epoch 110/150\n","60000/60000 [==============================] - 6s 104us/step - loss: 0.0056 - val_loss: 0.0058\n","Epoch 111/150\n","60000/60000 [==============================] - 6s 105us/step - loss: 0.0056 - val_loss: 0.0058\n","Epoch 112/150\n","60000/60000 [==============================] - 6s 104us/step - loss: 0.0055 - val_loss: 0.0059\n","Epoch 113/150\n","60000/60000 [==============================] - 6s 103us/step - loss: 0.0055 - val_loss: 0.0057\n","Epoch 114/150\n","60000/60000 [==============================] - 6s 104us/step - loss: 0.0055 - val_loss: 0.0057\n","Epoch 115/150\n","60000/60000 [==============================] - 6s 105us/step - loss: 0.0055 - val_loss: 0.0057\n","Epoch 116/150\n","60000/60000 [==============================] - 6s 105us/step - loss: 0.0055 - val_loss: 0.0056\n","Epoch 117/150\n","60000/60000 [==============================] - 6s 104us/step - loss: 0.0054 - val_loss: 0.0057\n","Epoch 118/150\n","60000/60000 [==============================] - 6s 105us/step - loss: 0.0054 - val_loss: 0.0056\n","Epoch 119/150\n","60000/60000 [==============================] - 6s 105us/step - loss: 0.0054 - val_loss: 0.0056\n","Epoch 120/150\n","60000/60000 [==============================] - 6s 104us/step - loss: 0.0053 - val_loss: 0.0055\n","Epoch 121/150\n","60000/60000 [==============================] - 6s 105us/step - loss: 0.0053 - val_loss: 0.0056\n","Epoch 122/150\n","60000/60000 [==============================] - 6s 105us/step - loss: 0.0053 - val_loss: 0.0055\n","Epoch 123/150\n","60000/60000 [==============================] - 6s 104us/step - loss: 0.0053 - val_loss: 0.0054\n","Epoch 124/150\n","60000/60000 [==============================] - 6s 103us/step - loss: 0.0052 - val_loss: 0.0055\n","Epoch 125/150\n","60000/60000 [==============================] - 6s 102us/step - loss: 0.0052 - val_loss: 0.0055\n","Epoch 126/150\n","60000/60000 [==============================] - 6s 103us/step - loss: 0.0052 - val_loss: 0.0054\n","Epoch 127/150\n","60000/60000 [==============================] - 6s 104us/step - loss: 0.0052 - val_loss: 0.0054\n","Epoch 128/150\n","60000/60000 [==============================] - 6s 105us/step - loss: 0.0052 - val_loss: 0.0053\n","Epoch 129/150\n","60000/60000 [==============================] - 6s 104us/step - loss: 0.0051 - val_loss: 0.0053\n","Epoch 130/150\n","60000/60000 [==============================] - 6s 105us/step - loss: 0.0051 - val_loss: 0.0053\n","Epoch 131/150\n","60000/60000 [==============================] - 6s 104us/step - loss: 0.0051 - val_loss: 0.0054\n","Epoch 132/150\n","60000/60000 [==============================] - 6s 104us/step - loss: 0.0051 - val_loss: 0.0053\n","Epoch 133/150\n","60000/60000 [==============================] - 6s 104us/step - loss: 0.0050 - val_loss: 0.0052\n","Epoch 134/150\n","60000/60000 [==============================] - 6s 104us/step - loss: 0.0050 - val_loss: 0.0052\n","Epoch 135/150\n","60000/60000 [==============================] - 6s 104us/step - loss: 0.0050 - val_loss: 0.0052\n","Epoch 136/150\n","60000/60000 [==============================] - 6s 103us/step - loss: 0.0049 - val_loss: 0.0052\n","Epoch 137/150\n","60000/60000 [==============================] - 6s 103us/step - loss: 0.0050 - val_loss: 0.0051\n","Epoch 138/150\n","60000/60000 [==============================] - 6s 104us/step - loss: 0.0049 - val_loss: 0.0051\n","Epoch 139/150\n","60000/60000 [==============================] - 6s 104us/step - loss: 0.0049 - val_loss: 0.0051\n","Epoch 140/150\n","60000/60000 [==============================] - 6s 103us/step - loss: 0.0049 - val_loss: 0.0051\n","Epoch 141/150\n","60000/60000 [==============================] - 6s 104us/step - loss: 0.0049 - val_loss: 0.0051\n","Epoch 142/150\n","60000/60000 [==============================] - 6s 103us/step - loss: 0.0048 - val_loss: 0.0051\n","Epoch 143/150\n","60000/60000 [==============================] - 6s 103us/step - loss: 0.0048 - val_loss: 0.0050\n","Epoch 144/150\n","60000/60000 [==============================] - 6s 103us/step - loss: 0.0048 - val_loss: 0.0050\n","Epoch 145/150\n","60000/60000 [==============================] - 6s 103us/step - loss: 0.0048 - val_loss: 0.0050\n","Epoch 146/150\n","60000/60000 [==============================] - 6s 104us/step - loss: 0.0048 - val_loss: 0.0050\n","Epoch 147/150\n","60000/60000 [==============================] - 6s 103us/step - loss: 0.0047 - val_loss: 0.0050\n","Epoch 148/150\n","60000/60000 [==============================] - 6s 101us/step - loss: 0.0047 - val_loss: 0.0049\n","Epoch 149/150\n","60000/60000 [==============================] - 6s 101us/step - loss: 0.0047 - val_loss: 0.0049\n","Epoch 150/150\n","60000/60000 [==============================] - 6s 101us/step - loss: 0.0047 - val_loss: 0.0049\n","Train on 60000 samples, validate on 10000 samples\n","Epoch 1/150\n","60000/60000 [==============================] - 7s 122us/step - loss: 0.3608 - val_loss: 0.2610\n","Epoch 2/150\n","60000/60000 [==============================] - 7s 120us/step - loss: 0.2567 - val_loss: 0.2528\n","Epoch 3/150\n","60000/60000 [==============================] - 7s 119us/step - loss: 0.2500 - val_loss: 0.2423\n","Epoch 4/150\n","60000/60000 [==============================] - 7s 118us/step - loss: 0.2311 - val_loss: 0.2134\n","Epoch 5/150\n","60000/60000 [==============================] - 7s 117us/step - loss: 0.2024 - val_loss: 0.1877\n","Epoch 6/150\n","60000/60000 [==============================] - 7s 117us/step - loss: 0.1764 - val_loss: 0.1647\n","Epoch 7/150\n","60000/60000 [==============================] - 7s 116us/step - loss: 0.1588 - val_loss: 0.1507\n","Epoch 8/150\n","60000/60000 [==============================] - 7s 117us/step - loss: 0.1469 - val_loss: 0.1411\n","Epoch 9/150\n","60000/60000 [==============================] - 7s 120us/step - loss: 0.1395 - val_loss: 0.1351\n","Epoch 10/150\n","60000/60000 [==============================] - 7s 119us/step - loss: 0.1342 - val_loss: 0.1306\n","Epoch 11/150\n","60000/60000 [==============================] - 7s 119us/step - loss: 0.1301 - val_loss: 0.1276\n","Epoch 12/150\n","60000/60000 [==============================] - 7s 119us/step - loss: 0.1270 - val_loss: 0.1241\n","Epoch 13/150\n","60000/60000 [==============================] - 7s 118us/step - loss: 0.1241 - val_loss: 0.1214\n","Epoch 14/150\n","60000/60000 [==============================] - 7s 118us/step - loss: 0.1212 - val_loss: 0.1193\n","Epoch 15/150\n","60000/60000 [==============================] - 7s 124us/step - loss: 0.1183 - val_loss: 0.1162\n","Epoch 16/150\n","60000/60000 [==============================] - 7s 120us/step - loss: 0.1156 - val_loss: 0.1132\n","Epoch 17/150\n","60000/60000 [==============================] - 7s 120us/step - loss: 0.1133 - val_loss: 0.1110\n","Epoch 18/150\n","60000/60000 [==============================] - 7s 119us/step - loss: 0.1111 - val_loss: 0.1099\n","Epoch 19/150\n","60000/60000 [==============================] - 7s 120us/step - loss: 0.1094 - val_loss: 0.1079\n","Epoch 20/150\n","60000/60000 [==============================] - 7s 120us/step - loss: 0.1080 - val_loss: 0.1060\n","Epoch 21/150\n","60000/60000 [==============================] - 7s 121us/step - loss: 0.1065 - val_loss: 0.1050\n","Epoch 22/150\n","60000/60000 [==============================] - 7s 121us/step - loss: 0.1053 - val_loss: 0.1038\n","Epoch 23/150\n","60000/60000 [==============================] - 7s 120us/step - loss: 0.1037 - val_loss: 0.1023\n","Epoch 24/150\n","60000/60000 [==============================] - 7s 120us/step - loss: 0.1025 - val_loss: 0.1015\n","Epoch 25/150\n","60000/60000 [==============================] - 7s 120us/step - loss: 0.1014 - val_loss: 0.0999\n","Epoch 26/150\n","60000/60000 [==============================] - 7s 120us/step - loss: 0.1002 - val_loss: 0.0990\n","Epoch 27/150\n","60000/60000 [==============================] - 7s 121us/step - loss: 0.0992 - val_loss: 0.0980\n","Epoch 28/150\n","60000/60000 [==============================] - 7s 122us/step - loss: 0.0981 - val_loss: 0.0974\n","Epoch 29/150\n","60000/60000 [==============================] - 7s 121us/step - loss: 0.0973 - val_loss: 0.0963\n","Epoch 30/150\n","60000/60000 [==============================] - 7s 120us/step - loss: 0.0965 - val_loss: 0.0957\n","Epoch 31/150\n","60000/60000 [==============================] - 7s 121us/step - loss: 0.0958 - val_loss: 0.0946\n","Epoch 32/150\n","60000/60000 [==============================] - 7s 119us/step - loss: 0.0950 - val_loss: 0.0942\n","Epoch 33/150\n","60000/60000 [==============================] - 7s 119us/step - loss: 0.0943 - val_loss: 0.0934\n","Epoch 34/150\n","60000/60000 [==============================] - 7s 119us/step - loss: 0.0937 - val_loss: 0.0929\n","Epoch 35/150\n","60000/60000 [==============================] - 7s 118us/step - loss: 0.0930 - val_loss: 0.0926\n","Epoch 36/150\n","60000/60000 [==============================] - 7s 120us/step - loss: 0.0925 - val_loss: 0.0917\n","Epoch 37/150\n","60000/60000 [==============================] - 7s 123us/step - loss: 0.0918 - val_loss: 0.0912\n","Epoch 38/150\n","60000/60000 [==============================] - 7s 123us/step - loss: 0.0912 - val_loss: 0.0907\n","Epoch 39/150\n","60000/60000 [==============================] - 7s 122us/step - loss: 0.0907 - val_loss: 0.0904\n","Epoch 40/150\n","60000/60000 [==============================] - 7s 121us/step - loss: 0.0902 - val_loss: 0.0898\n","Epoch 41/150\n","60000/60000 [==============================] - 7s 120us/step - loss: 0.0898 - val_loss: 0.0892\n","Epoch 42/150\n","60000/60000 [==============================] - 7s 121us/step - loss: 0.0894 - val_loss: 0.0893\n","Epoch 43/150\n","60000/60000 [==============================] - 7s 121us/step - loss: 0.0888 - val_loss: 0.0884\n","Epoch 44/150\n","60000/60000 [==============================] - 7s 121us/step - loss: 0.0886 - val_loss: 0.0884\n","Epoch 45/150\n","60000/60000 [==============================] - 7s 121us/step - loss: 0.0881 - val_loss: 0.0877\n","Epoch 46/150\n","60000/60000 [==============================] - 7s 119us/step - loss: 0.0878 - val_loss: 0.0873\n","Epoch 47/150\n","60000/60000 [==============================] - 7s 119us/step - loss: 0.0875 - val_loss: 0.0874\n","Epoch 48/150\n","60000/60000 [==============================] - 7s 122us/step - loss: 0.0872 - val_loss: 0.0870\n","Epoch 49/150\n","60000/60000 [==============================] - 7s 121us/step - loss: 0.0868 - val_loss: 0.0865\n","Epoch 50/150\n","60000/60000 [==============================] - 7s 120us/step - loss: 0.0865 - val_loss: 0.0866\n","Epoch 51/150\n","60000/60000 [==============================] - 7s 122us/step - loss: 0.0862 - val_loss: 0.0859\n","Epoch 52/150\n","60000/60000 [==============================] - 7s 123us/step - loss: 0.0859 - val_loss: 0.0861\n","Epoch 53/150\n","60000/60000 [==============================] - 7s 122us/step - loss: 0.0856 - val_loss: 0.0859\n","Epoch 54/150\n","60000/60000 [==============================] - 7s 122us/step - loss: 0.0854 - val_loss: 0.0854\n","Epoch 55/150\n","60000/60000 [==============================] - 7s 121us/step - loss: 0.0852 - val_loss: 0.0850\n","Epoch 56/150\n","60000/60000 [==============================] - 7s 119us/step - loss: 0.0848 - val_loss: 0.0849\n","Epoch 57/150\n","60000/60000 [==============================] - 7s 121us/step - loss: 0.0846 - val_loss: 0.0850\n","Epoch 58/150\n","60000/60000 [==============================] - 7s 120us/step - loss: 0.0844 - val_loss: 0.0844\n","Epoch 59/150\n","60000/60000 [==============================] - 7s 121us/step - loss: 0.0840 - val_loss: 0.0840\n","Epoch 60/150\n","60000/60000 [==============================] - 7s 121us/step - loss: 0.0839 - val_loss: 0.0838\n","Epoch 61/150\n","60000/60000 [==============================] - 7s 120us/step - loss: 0.0836 - val_loss: 0.0837\n","Epoch 62/150\n","60000/60000 [==============================] - 7s 120us/step - loss: 0.0834 - val_loss: 0.0835\n","Epoch 63/150\n","60000/60000 [==============================] - 7s 119us/step - loss: 0.0831 - val_loss: 0.0831\n","Epoch 64/150\n","60000/60000 [==============================] - 7s 120us/step - loss: 0.0831 - val_loss: 0.0828\n","Epoch 65/150\n","60000/60000 [==============================] - 7s 118us/step - loss: 0.0827 - val_loss: 0.0827\n","Epoch 66/150\n","60000/60000 [==============================] - 7s 117us/step - loss: 0.0825 - val_loss: 0.0823\n","Epoch 67/150\n","60000/60000 [==============================] - 7s 122us/step - loss: 0.0823 - val_loss: 0.0823\n","Epoch 68/150\n","60000/60000 [==============================] - 7s 122us/step - loss: 0.0821 - val_loss: 0.0820\n","Epoch 69/150\n","60000/60000 [==============================] - 7s 118us/step - loss: 0.0819 - val_loss: 0.0820\n","Epoch 70/150\n","60000/60000 [==============================] - 7s 120us/step - loss: 0.0817 - val_loss: 0.0818\n","Epoch 71/150\n","60000/60000 [==============================] - 7s 121us/step - loss: 0.0817 - val_loss: 0.0818\n","Epoch 72/150\n","60000/60000 [==============================] - 7s 121us/step - loss: 0.0814 - val_loss: 0.0816\n","Epoch 73/150\n","60000/60000 [==============================] - 7s 119us/step - loss: 0.0812 - val_loss: 0.0815\n","Epoch 74/150\n","60000/60000 [==============================] - 7s 122us/step - loss: 0.0811 - val_loss: 0.0813\n","Epoch 75/150\n","60000/60000 [==============================] - 7s 121us/step - loss: 0.0810 - val_loss: 0.0810\n","Epoch 76/150\n","60000/60000 [==============================] - 7s 121us/step - loss: 0.0809 - val_loss: 0.0810\n","Epoch 77/150\n","60000/60000 [==============================] - 7s 118us/step - loss: 0.0805 - val_loss: 0.0807\n","Epoch 78/150\n","60000/60000 [==============================] - 7s 117us/step - loss: 0.0804 - val_loss: 0.0806\n","Epoch 79/150\n","60000/60000 [==============================] - 7s 116us/step - loss: 0.0802 - val_loss: 0.0804\n","Epoch 80/150\n","60000/60000 [==============================] - 7s 117us/step - loss: 0.0801 - val_loss: 0.0803\n","Epoch 81/150\n","60000/60000 [==============================] - 7s 118us/step - loss: 0.0800 - val_loss: 0.0803\n","Epoch 82/150\n","60000/60000 [==============================] - 7s 117us/step - loss: 0.0798 - val_loss: 0.0800\n","Epoch 83/150\n","60000/60000 [==============================] - 7s 116us/step - loss: 0.0797 - val_loss: 0.0801\n","Epoch 84/150\n","60000/60000 [==============================] - 7s 117us/step - loss: 0.0796 - val_loss: 0.0798\n","Epoch 85/150\n","60000/60000 [==============================] - 7s 116us/step - loss: 0.0795 - val_loss: 0.0797\n","Epoch 86/150\n","60000/60000 [==============================] - 7s 119us/step - loss: 0.0794 - val_loss: 0.0796\n","Epoch 87/150\n","60000/60000 [==============================] - 7s 117us/step - loss: 0.0792 - val_loss: 0.0796\n","Epoch 88/150\n","60000/60000 [==============================] - 7s 116us/step - loss: 0.0791 - val_loss: 0.0794\n","Epoch 89/150\n","60000/60000 [==============================] - 7s 119us/step - loss: 0.0789 - val_loss: 0.0792\n","Epoch 90/150\n","60000/60000 [==============================] - 7s 121us/step - loss: 0.0789 - val_loss: 0.0791\n","Epoch 91/150\n","60000/60000 [==============================] - 7s 121us/step - loss: 0.0788 - val_loss: 0.0790\n","Epoch 92/150\n","60000/60000 [==============================] - 7s 120us/step - loss: 0.0787 - val_loss: 0.0792\n","Epoch 93/150\n","60000/60000 [==============================] - 7s 120us/step - loss: 0.0786 - val_loss: 0.0790\n","Epoch 94/150\n","60000/60000 [==============================] - 7s 119us/step - loss: 0.0784 - val_loss: 0.0788\n","Epoch 95/150\n","60000/60000 [==============================] - 7s 120us/step - loss: 0.0784 - val_loss: 0.0788\n","Epoch 96/150\n","60000/60000 [==============================] - 7s 118us/step - loss: 0.0782 - val_loss: 0.0785\n","Epoch 97/150\n","60000/60000 [==============================] - 7s 119us/step - loss: 0.0782 - val_loss: 0.0786\n","Epoch 98/150\n","60000/60000 [==============================] - 7s 120us/step - loss: 0.0781 - val_loss: 0.0785\n","Epoch 99/150\n","60000/60000 [==============================] - 7s 120us/step - loss: 0.0779 - val_loss: 0.0783\n","Epoch 100/150\n","60000/60000 [==============================] - 7s 121us/step - loss: 0.0778 - val_loss: 0.0790\n","Epoch 101/150\n","60000/60000 [==============================] - 7s 119us/step - loss: 0.0778 - val_loss: 0.0783\n","Epoch 102/150\n","60000/60000 [==============================] - 7s 118us/step - loss: 0.0777 - val_loss: 0.0781\n","Epoch 103/150\n","60000/60000 [==============================] - 7s 118us/step - loss: 0.0776 - val_loss: 0.0781\n","Epoch 104/150\n","60000/60000 [==============================] - 7s 118us/step - loss: 0.0774 - val_loss: 0.0777\n","Epoch 105/150\n","60000/60000 [==============================] - 7s 118us/step - loss: 0.0774 - val_loss: 0.0776\n","Epoch 106/150\n","60000/60000 [==============================] - 7s 118us/step - loss: 0.0772 - val_loss: 0.0777\n","Epoch 107/150\n","60000/60000 [==============================] - 7s 117us/step - loss: 0.0772 - val_loss: 0.0776\n","Epoch 108/150\n","60000/60000 [==============================] - 7s 117us/step - loss: 0.0771 - val_loss: 0.0774\n","Epoch 109/150\n","60000/60000 [==============================] - 7s 117us/step - loss: 0.0771 - val_loss: 0.0776\n","Epoch 110/150\n","60000/60000 [==============================] - 7s 119us/step - loss: 0.0769 - val_loss: 0.0774\n","Epoch 111/150\n","60000/60000 [==============================] - 7s 118us/step - loss: 0.0768 - val_loss: 0.0772\n","Epoch 112/150\n","60000/60000 [==============================] - 7s 119us/step - loss: 0.0767 - val_loss: 0.0773\n","Epoch 113/150\n","60000/60000 [==============================] - 7s 120us/step - loss: 0.0767 - val_loss: 0.0772\n","Epoch 114/150\n","60000/60000 [==============================] - 7s 119us/step - loss: 0.0765 - val_loss: 0.0771\n","Epoch 115/150\n","60000/60000 [==============================] - 7s 120us/step - loss: 0.0765 - val_loss: 0.0767\n","Epoch 116/150\n","60000/60000 [==============================] - 7s 120us/step - loss: 0.0764 - val_loss: 0.0769\n","Epoch 117/150\n","60000/60000 [==============================] - 7s 119us/step - loss: 0.0763 - val_loss: 0.0769\n","Epoch 118/150\n","60000/60000 [==============================] - 7s 120us/step - loss: 0.0764 - val_loss: 0.0768\n","Epoch 119/150\n","60000/60000 [==============================] - 7s 120us/step - loss: 0.0762 - val_loss: 0.0767\n","Epoch 120/150\n","60000/60000 [==============================] - 7s 122us/step - loss: 0.0761 - val_loss: 0.0766\n","Epoch 121/150\n","60000/60000 [==============================] - 7s 121us/step - loss: 0.0761 - val_loss: 0.0764\n","Epoch 122/150\n","60000/60000 [==============================] - 7s 121us/step - loss: 0.0759 - val_loss: 0.0766\n","Epoch 123/150\n","60000/60000 [==============================] - 7s 120us/step - loss: 0.0759 - val_loss: 0.0762\n","Epoch 124/150\n","60000/60000 [==============================] - 7s 120us/step - loss: 0.0758 - val_loss: 0.0762\n","Epoch 125/150\n","60000/60000 [==============================] - 7s 122us/step - loss: 0.0757 - val_loss: 0.0763\n","Epoch 126/150\n","60000/60000 [==============================] - 7s 121us/step - loss: 0.0756 - val_loss: 0.0762\n","Epoch 127/150\n","60000/60000 [==============================] - 7s 120us/step - loss: 0.0757 - val_loss: 0.0762\n","Epoch 128/150\n","60000/60000 [==============================] - 7s 120us/step - loss: 0.0755 - val_loss: 0.0762\n","Epoch 129/150\n","60000/60000 [==============================] - 7s 121us/step - loss: 0.0754 - val_loss: 0.0760\n","Epoch 130/150\n","60000/60000 [==============================] - 7s 120us/step - loss: 0.0754 - val_loss: 0.0758\n","Epoch 131/150\n","60000/60000 [==============================] - 7s 121us/step - loss: 0.0754 - val_loss: 0.0758\n","Epoch 132/150\n","60000/60000 [==============================] - 7s 120us/step - loss: 0.0753 - val_loss: 0.0759\n","Epoch 133/150\n","60000/60000 [==============================] - 7s 120us/step - loss: 0.0751 - val_loss: 0.0758\n","Epoch 134/150\n","60000/60000 [==============================] - 7s 118us/step - loss: 0.0752 - val_loss: 0.0759\n","Epoch 135/150\n","60000/60000 [==============================] - 7s 118us/step - loss: 0.0750 - val_loss: 0.0757\n","Epoch 136/150\n","60000/60000 [==============================] - 7s 117us/step - loss: 0.0750 - val_loss: 0.0756\n","Epoch 137/150\n","60000/60000 [==============================] - 7s 118us/step - loss: 0.0750 - val_loss: 0.0757\n","Epoch 138/150\n","60000/60000 [==============================] - 7s 117us/step - loss: 0.0749 - val_loss: 0.0754\n","Epoch 139/150\n","60000/60000 [==============================] - 7s 118us/step - loss: 0.0748 - val_loss: 0.0754\n","Epoch 140/150\n","60000/60000 [==============================] - 7s 117us/step - loss: 0.0748 - val_loss: 0.0754\n","Epoch 141/150\n","60000/60000 [==============================] - 7s 117us/step - loss: 0.0747 - val_loss: 0.0754\n","Epoch 142/150\n","60000/60000 [==============================] - 7s 118us/step - loss: 0.0747 - val_loss: 0.0752\n","Epoch 143/150\n","60000/60000 [==============================] - 7s 117us/step - loss: 0.0746 - val_loss: 0.0751\n","Epoch 144/150\n","60000/60000 [==============================] - 7s 120us/step - loss: 0.0745 - val_loss: 0.0751\n","Epoch 145/150\n","60000/60000 [==============================] - 7s 121us/step - loss: 0.0744 - val_loss: 0.0751\n","Epoch 146/150\n","60000/60000 [==============================] - 7s 124us/step - loss: 0.0744 - val_loss: 0.0748\n","Epoch 147/150\n","60000/60000 [==============================] - 7s 120us/step - loss: 0.0744 - val_loss: 0.0750\n","Epoch 148/150\n","60000/60000 [==============================] - 7s 120us/step - loss: 0.0743 - val_loss: 0.0748\n","Epoch 149/150\n","60000/60000 [==============================] - 7s 121us/step - loss: 0.0744 - val_loss: 0.0748\n","Epoch 150/150\n","60000/60000 [==============================] - 7s 123us/step - loss: 0.0742 - val_loss: 0.0748\n"]}]},{"cell_type":"code","metadata":{"id":"VJSd0bpAXb7E"},"source":["#Obtain encoder representation of data\n","get_hl_bce = K.function([deep_ae_bce.layers[0].input],  [deep_ae_bce.layers[3].output], [deep_ae_bce.layers[7].output]) #The third hidden layer is indexed at 2\n","get_hl_mse = K.function([deep_ae_mse.layers[0].input],  [deep_ae_mse.layers[3].output], [deep_ae_mse.layers[7].output]) #The third hidden layer is indexed at 2\n","bottleneckLayer_bce = tf.reshape(tf.squeeze(get_hl_bce(data_test)),(10000,10,10))\n","bottleneckLayer_mse = tf.reshape(tf.squeeze(get_hl_mse(data_test)),(10000,10,10))"],"execution_count":null,"outputs":[]},{"cell_type":"code","metadata":{"id":"r-JdXK82PlNb"},"source":["def plotting(history_bce, history_mse,title):\n","  plt.figure(figsize=(20,5))\n","  plt.subplot(121)\n","  plt.plot(history_bce.loss)\n","  plt.title('Binary Cross entropy Loss vs Epoch'); plt.ylabel('Loss'); plt.xlabel('Epoch')\n","  plt.legend(['train','test']); \n","  plt.subplot(122);\n","  plt.plot(history_mse.loss)\n","  plt.title('Mean Squared Error Loss vs Epoch'); plt.ylabel('Loss'); plt.xlabel('Epoch')\n","  plt.legend(['train','test']); plt.suptitle(title); plt.show();\n","def plotting2(history,title):\n","  plt.figure(figsize=(20,5))\n","  plt.subplot(121)\n","  plt.plot(history.accuracy)\n","  plt.plot(history.val_accuracy)\n","  plt.title('Accuracy vs Epoch'); plt.ylabel('Accuracy'); plt.xlabel('Epoch')\n","  plt.legend(['train','test']); \n","  plt.subplot(122);\n","  plt.plot(history.loss)\n","  plt.plot(history.val_loss)\n","  plt.title('Loss vs Epoch'); plt.ylabel('Loss'); plt.xlabel('Epoch')\n","  plt.legend(['train','test']); plt.suptitle(title); plt.show();"],"execution_count":null,"outputs":[]},{"cell_type":"code","metadata":{"id":"cb1psOUHtZpk","colab":{"base_uri":"https://localhost:8080/","height":235},"executionInfo":{"status":"error","timestamp":1633601171305,"user_tz":240,"elapsed":620,"user":{"displayName":"Pranav Mohan","photoUrl":"https://lh3.googleusercontent.com/a/default-user=s64","userId":"13794727767939433211"}},"outputId":"909b5d90-8f7e-4ea9-ff8d-9a6b51c5edd9"},"source":["#Plot loss vs epoch for BCE and MSE [Together or separate, Both accepted]\n","#df_bce = pd.DataFrame(deep_ae_mdata_bce.history) \n","#df_mse = pd.DataFrame(deep_ae_mdata_mse.history) \n"," \n","plotting2(df_bce,'title')\n","plotting2(df_mse,'title')\n"],"execution_count":null,"outputs":[{"output_type":"error","ename":"NameError","evalue":"ignored","traceback":["\u001b[0;31m\u001b[0m","\u001b[0;31mNameError\u001b[0mTraceback (most recent call last)","\u001b[0;32m<ipython-input-7-32632020b307>\u001b[0m in \u001b[0;36m<module>\u001b[0;34m()\u001b[0m\n\u001b[1;32m      4\u001b[0m \u001b[0mdf_bce_file\u001b[0m \u001b[0;34m=\u001b[0m \u001b[0;34m'/content/drive/MyDrive/ECE595DL/Project2/df_bce.csv'\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m      5\u001b[0m \u001b[0;32mwith\u001b[0m \u001b[0mopen\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0mdf_bce_file\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0mmode\u001b[0m\u001b[0;34m=\u001b[0m\u001b[0;34m'w'\u001b[0m\u001b[0;34m)\u001b[0m \u001b[0;32mas\u001b[0m \u001b[0mf\u001b[0m\u001b[0;34m:\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0;32m----> 6\u001b[0;31m     \u001b[0mdf_bce\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mto_csv\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0mf\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0m\u001b[1;32m      7\u001b[0m \u001b[0mdf_mse_file\u001b[0m \u001b[0;34m=\u001b[0m \u001b[0;34m'/content/drive/MyDrive/ECE595DL/Project2/df_mse.csv'\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m      8\u001b[0m \u001b[0;32mwith\u001b[0m \u001b[0mopen\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0mdf_mse_file\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0mmode\u001b[0m\u001b[0;34m=\u001b[0m\u001b[0;34m'w'\u001b[0m\u001b[0;34m)\u001b[0m \u001b[0;32mas\u001b[0m \u001b[0mf\u001b[0m\u001b[0;34m:\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n","\u001b[0;31mNameError\u001b[0m: name 'df_bce' is not defined"]}]},{"cell_type":"code","metadata":{"id":"21ALTu2Vte2-","colab":{"base_uri":"https://localhost:8080/","height":820},"executionInfo":{"status":"ok","timestamp":1633546940263,"user_tz":240,"elapsed":1928,"user":{"displayName":"Pranav Mohan","photoUrl":"https://lh3.googleusercontent.com/a/default-user=s64","userId":"13794727767939433211"}},"outputId":"19a63068-2b82-4f37-f559-f2e457a6df12"},"source":["#Show samples of 10 images, their hidden layer representations, and their reconstructions\n","n = 10; ny=5;\n","plt.figure(figsize=(20, 15))\n","for i in range(n):\n","  # display original\n","  ax = plt.subplot(ny, n, i + 1)\n","  plt.imshow(data_test[i])\n","  plt.title(\"original\")\n","  plt.gray()\n","  ax.get_xaxis().set_visible(False)\n","  ax.get_yaxis().set_visible(False)\n","\n","  # Hidden Layer\n","  ax = plt.subplot(ny, n, i + 1 + n)\n","  plt.imshow(bottleneckLayer_bce[i])\n","  plt.title(\"Bottleneck BCE\")\n","  plt.gray()\n","  ax.get_xaxis().set_visible(False)\n","  ax.get_yaxis().set_visible(False)\n","\n","  # display reconstruction\n","  ax = plt.subplot(ny, n, i + 1 + 2*n)\n","  plt.imshow(reconstructions_bce[i])\n","  plt.title(\"Reconstructed BCE\")\n","  plt.gray()\n","  ax.get_xaxis().set_visible(False)\n","  ax.get_yaxis().set_visible(False)\n","  \n","  # Hidden Layer\n","  ax = plt.subplot(ny, n, i + 1 + 3*n)\n","  plt.imshow(bottleneckLayer_mse[i])\n","  plt.title(\"Bottleneck MSE\")\n","  plt.gray()\n","  ax.get_xaxis().set_visible(False)\n","  ax.get_yaxis().set_visible(False)\n","\n","  # display reconstruction\n","  ax = plt.subplot(ny, n, i + 1 + 4*n)\n","  plt.imshow(reconstructions_mse[i])\n","  plt.title(\"Reconstructed MSE\")\n","  plt.gray()\n","  ax.get_xaxis().set_visible(False)\n","  ax.get_yaxis().set_visible(False)\n","plt.show()\n","# Code borrowed from https://www.tensorflow.org/tutorials/generative/autoencoder"],"execution_count":null,"outputs":[{"output_type":"display_data","data":{"image/png":"\n","text/plain":["<Figure size 1440x1080 with 50 Axes>"]},"metadata":{"needs_background":"light"}}]},{"cell_type":"markdown","metadata":{"id":"Tx3piQQZReeW"},"source":["Answer the following questions: \n","\n","\n","1.  Question 2c: BONUS [reasoning question]: Pair the output layer activation and loss function which performs better together. Linear, sigmoid, Binary cross entropy and Mean Square error\n"," \n","\n","2.  Question 5: Which loss function is better and why?\n","\n","3.  Question 6: If we were to predict pixels values [0 to 255] directly at the output of last layer. Should there be an activation function in last later?  If yes, which activation function and why?,  If No, reason why?"]},{"cell_type":"markdown","metadata":{"id":"TA4O3FwRt-sO"},"source":["#Part 2: Deep Convolutional AutoEncoder"]},{"cell_type":"code","metadata":{"id":"-a7Xlz7VuBl8","colab":{"base_uri":"https://localhost:8080/"},"executionInfo":{"status":"ok","timestamp":1633544484109,"user_tz":240,"elapsed":182,"user":{"displayName":"Pranav Mohan","photoUrl":"https://lh3.googleusercontent.com/a/default-user=s64","userId":"13794727767939433211"}},"outputId":"56877ccd-6a71-4e28-9ef4-b2618b7d8382"},"source":["#Reshape data into 2-D signals and account for grayscale channel in each image\n","tf.shape(data_train)"],"execution_count":null,"outputs":[{"output_type":"execute_result","data":{"text/plain":["<tf.Tensor: shape=(3,), dtype=int32, numpy=array([60000,    28,    28], dtype=int32)>"]},"metadata":{},"execution_count":65}]},{"cell_type":"code","metadata":{"id":"a-wENWWnuQGa"},"source":["#Create Convolutional AutoEncoder Architecture\n","n=28; num_channels=1;\n","def cae():\n","    model = Sequential()\n","    model.add(InputLayer(input_shape=(n,n,num_channels)))\n","    model.add(Conv2D(16, kernel_size=(3,3), activation='relu'))\n","    model.add(MaxPooling2D(pool_size=(2,2), strides=None, padding='Valid', data_format=None))\n","    model.add(Conv2D(8, kernel_size=(3,3), activation='relu',input_shape=(n,n,num_channels)))\n","    model.add(MaxPooling2D(pool_size=(2,2), strides=None, padding='Valid', data_format=None))\n","    model.add(Conv2D(8, kernel_size=(3,3), activation='relu',input_shape=(n,n,num_channels)))\n","    model.add(UpSampling((2,2)))\n","    model.add(Conv2D(16, kernel_size=(3,3), activation='relu'))\n","    model.add(UpSampling((2,2)))\n","    model.add(Conv2D(1, kernel_size=(3,3), activation='softmax'))\n","    #FILL THIS IN WITH MODEL ARCHITECTURE\n","\n","    return model\n","\n","#Create deep autoencoder graph\n","conv_ae = cae()\n","\n","#Compile model using an appropriate loss and optimizer algorithm\n","#FILL THIS IN\n","\n","#Train the model and assign training meta-data to a variable\n","#FILL THIS IN\n","\n","#Calculate the reconstructions of the testing set (output of autoencoder on test set)\n","#FILL THIS IN\n","\n","\n","#Obtain encoder representation of data\n","get_hl = K.function([conv_ae.layers[0].input], [conv_ae.layers[3].output])  # The fourth hidden layer are indexed at 3\n","conv_ae_hl = get_hl([data_test_reshape_cae])[0]"],"execution_count":null,"outputs":[]},{"cell_type":"code","metadata":{"id":"7sVJO4y1ujCZ"},"source":["#Plot loss vs epoch  for BCE and MSE [Together or separate, Both accepted]\n","#FILL THIS CODE BLOCK IN AND PRODUCE PLOT"],"execution_count":null,"outputs":[]},{"cell_type":"code","metadata":{"id":"KcclERBAu0-u"},"source":["#Show samples of 10 images, their hidden layer representations, and their reconstructions\n","#FILL THIS CODE BLOCK IN AND PRODUCE SAMPLES"],"execution_count":null,"outputs":[]},{"cell_type":"markdown","metadata":{"id":"V8lacfJnUyET"},"source":["Answer the following questions: \n","\n","\n","1.  Question 4: Which loss function is better and why?"]},{"cell_type":"markdown","metadata":{"id":"6QfcpOPXvezs"},"source":["#Part 3: Denoising AutoEncoder"]},{"cell_type":"code","metadata":{"id":"c-lVJ3pfvhT5"},"source":["#Inject noise into testing data\n","noise_factor = 0.25\n","data_train_noisy = data_train + noise_factor * np.random.normal(loc=0.0, scale=1.0, size=data_train.shape)\n","data_test_noisy = data_test + noise_factor * np.random.normal(loc=0.0, scale=1.0, size=data_test.shape)\n","\n","#Clip to stay within valid (normalized) pixel range\n","data_train_noisy = np.clip(data_train_noisy, 0., 1.)\n","data_test_noisy = np.clip(data_test_noisy, 0., 1.)\n","\n","#Reshape data to comply with input of denoising autoencoder\n","#FILL THIS IN"],"execution_count":null,"outputs":[]},{"cell_type":"code","metadata":{"id":"J4zyjNfawzpU"},"source":["#Show samples of 10 original images and their corrsponding noisy counterparts from the training set\n","#FILL THIS CODE BLOCK IN AND PRODUCE SAMPLES"],"execution_count":null,"outputs":[]},{"cell_type":"code","metadata":{"id":"2nuk3UxSxD9D"},"source":["#Create denoising autoencoder architecture\n","def dae():\n","\n","    #FILL THIS IN WITH MODEL ARCHITECTURE\n","\n","    return model\n","  \n","\n","  \n","#Compile and train the DAE\n","#FILL THIS IN\n","\n","\n","#Generate denoised versions of noisy inputs\n","#FILL THIS IN\n"],"execution_count":null,"outputs":[]},{"cell_type":"code","metadata":{"id":"_azeum1yxYIf"},"source":["#Plot loss vs epoch\n","#FILL THIS CODE BLOCK IN AND PRODUCE PLOT"],"execution_count":null,"outputs":[]},{"cell_type":"code","metadata":{"id":"m6-Xh7EDx0Vq"},"source":["#Show samples of 10 original images, their noisy counterparts, and their de-noised images from the testing set\n","#FILL THIS CODE BLOCK IN AND PRODUCE SAMPLES"],"execution_count":null,"outputs":[]}]}